//Override bootstrap variables here, and use it to declare other variables.
@import "_custom_variables";

/**
 * For hiding text while allowing screen readers to read it.
 * Copied from the sr-only class in Twitter Bootstrap.
 */
@mixin screenReaderOnly {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

/**
 * Space function corresponds to the Bootstrap utility functions, i.e.
 * class="ml-2" is equal to margin-left: space(2);
 */
@function space($idx) {
  @return nth(nth($spacers, $idx + 1), 2);
}

/**
Mixin for including styles for mobile
*/
@mixin mobile {
  @media (max-width: $mq-small) {
    @content;
  }
}

/**
Mixin for including styles for tablet
*/
@mixin tablet {
  @media (max-width: $mq-medium) {
    @content;
  }
}

/**
Mixin for including styles for tablet
*/
@mixin small-desktop {
  @media (max-width: $d-medium) {
    @content;
  }
}

/**
Mixin for including styles for desktop
*/
@mixin desktop {
  @media (min-width: ($mq-small + 1)) {
    @content;
  }
}
/* ----------------------------------------------
 * Generated by Animista on 2020-7-14 10:26:45
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info.
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation heartbeat
 * ----------------------------------------
 */
@-webkit-keyframes heartbeat {
  from {
    -webkit-transform: scale(1);
    transform: scale(1);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
  10% {
    -webkit-transform: scale(0.91);
    transform: scale(0.91);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
  17% {
    -webkit-transform: scale(0.98);
    transform: scale(0.98);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
  33% {
    -webkit-transform: scale(0.87);
    transform: scale(0.87);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
  45% {
    -webkit-transform: scale(1);
    transform: scale(1);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
}
@keyframes heartbeat {
  from {
    -webkit-transform: scale(1);
    transform: scale(1);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
  10% {
    -webkit-transform: scale(0.91);
    transform: scale(0.91);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
  17% {
    -webkit-transform: scale(0.98);
    transform: scale(0.98);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
  33% {
    -webkit-transform: scale(0.87);
    transform: scale(0.87);
    -webkit-animation-timing-function: ease-in;
    animation-timing-function: ease-in;
  }
  45% {
    -webkit-transform: scale(1);
    transform: scale(1);
    -webkit-animation-timing-function: ease-out;
    animation-timing-function: ease-out;
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

@mixin backgroundAutofill($color: #ffffff) {
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus &:-webkit-autofill,
  &:-webkit-autofill:hover &:-webkit-autofill:focus,
  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus {
    -webkit-box-shadow: 0 0 0px 1000px $color inset !important;
  }
}

//convert pixel to em
@function em($pixels, $context: 16) {
  @return #{$pixels/$context}em;
}

@mixin customScrollbar($width: 6px, $color: $black) {
  //&::-webkit-scrollbar-track {
  //}

  &::-webkit-scrollbar {
    width: $width;
    background-color: #f5f5f5;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: $color;
  }
}

/// Rem mixin to calculate rem based spacing from the base pixel of the html document
/// Which can be set inside the mixin itself
///@author Shyqeri Gashi
///@param {CSS Property} $property - any css property
///@param {Value} $values - property value in pixels ONLY
///@output Calculated style from px to rem together with px fallback
///@example
/// h1 {
///   @include rem('font-size',16px);
/// }
/// //It outputs this: h1{font-size,16px; font-size:1rem;}
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();
  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value==0 or $value==0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if
      type-of($value)
      ==number and not
      unitless($value) and
      (unit($value) ==px)
    {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}
/// Centers element horizontally, vertically or both
///@author Shyqeri Gashi
///@param {boolean} $isHorizontal [true] - If we want the element to be centered horizontally
///@param {boolean} $isVertical [true] - If we want the element to be centered vertically
///@output Flex, container with the defined attribute to center it horizontally, vertically or both
///@example
/// body {
///   @include flexCenter(true,false);
/// }
/// //It outputs this: body {
/// // display: -webkit-box;
/// // display: -ms-flexbox;
/// // display: flex;
/// // -ms-flex-wrap: wrap;
/// // flex-wrap: wrap;
/// // -webkit-box-pack: center;
/// // -ms-flex-pack: center;
/// // justify-content: center;
/// // }
@mixin flexCenter($isHorizontal: true, $isVertical: true) {
  display: flex;
  flex-wrap: wrap;
  @if $isHorizontal == true {
    justify-content: center;
  }
  @if $isVertical== true {
    align-items: center;
  }
  @if $isHorizontal== true and $isVertical== true {
    justify-content: center;
    align-items: center;
  }
}

/// Extend only selector used to center an absolute positioned element
/// @example .container { @extend %centered; }
%centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// Extend only selector used to generate cropped images
/// @example img { @extend %imgCropped; }
%imgCropped {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
